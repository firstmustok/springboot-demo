buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.2.0'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.2.0'
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15"

        classpath "org.ajoberstar:gradle-git:1.5.1"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

// for document
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'

group = 'com.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenLocal()

    jcenter()
    mavenCentral()
}

project.ext {
    springVersion    = '4.3.8.RELEASE'
    hibernateVersion = '5.2.10.Final'
}

configurations.all
{
    resolutionStrategy
    {
        eachDependency { DependencyResolveDetails details ->
            if ( details.requested.group == 'org.springframework') {
                details.useVersion "${springVersion}"
            }
        }

        // cache dynamic versions for 10 minutes
        cacheDynamicVersionsFor 10*60, 'seconds'

        // don't cache changing modules at all
        cacheChangingModulesFor 1, 'seconds'
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.data:spring-data-envers:1.1.3.RELEASE')

    compile('io.springfox:springfox-swagger2:2.7.0')
    compile('io.swagger:swagger-annotations:1.5.6')

    compile('io.springfox:springfox-swagger-ui:2.7.0')

    runtime('org.postgresql:postgresql:42.1.4')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')

    testCompile('io.springfox:springfox-swagger2:2.7.0' )
    testCompile('io.springfox:springfox-bean-validators:2.7.0')
    testCompile('org.dbunit:dbunit:2.5.3')
    testCompile('com.github.springtestdbunit:spring-test-dbunit:1.3.0')
}

// hibernate {
//  enhance {
//    enableLazyInitialization    = false
//    enableDirtyTracking         = false
//    enableAssociationManagement = false
//    enableExtendedEnhancement   = false     
//  }
// }


ext {
    htmlDocOutputDir = file("${buildDir}/docs/")
    asciiDocOutputDir = file("${buildDir}/docs/asciidoc/generated")
    swaggerOutputDir = file("${buildDir}/docs/swagger")
    snippetsOutputDir = file("${buildDir}/docs/asciidoc/snippets")
}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
    systemProperty 'com.demo,version', version
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
        'swagger2markup.pathsGroupedBy' : 'TAGS',
        'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
    dependsOn convertSwagger2markup
    sourceDir asciiDocOutputDir
    // sources {
    //     include "index.adoc"
    // }
    // to generate both html and pdf
    backends = ['html5', 'pdf']
    outputDir = htmlDocOutputDir
    attributes = [
        doctype: 'book',
        toc: 'left',
        toclevels: '3',
        numbered: '',
        sectlinks: '',
        sectanchors: '',
        hardbreaks: '',
        generated: asciiDocOutputDir
    ]
}
